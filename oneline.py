(lambda tk, it, f, g, h, i, j, k, w, x: f(tk, it, g, h, i, j, k, w, x))(tk=__import__('tkinter'), it=__import__('itertools'), f=lambda tk, it, g, h, i, j, k, w, x: g(tk, it, h, i, j, k, w, x, t=tk.Tk()), g=lambda tk, it, h, i, j, k, w, x, t: t.title('Smile!') or h(it, j, k, w, x, c=i(tk, w, t)) or t.mainloop(), h=lambda it, j, k, w, x, c: c.pack() or j(all([c.create_rectangle(0, 0, w, w, fill=x[0]), c.create_oval(30, 30, w - 30, w - 30, outline=x[1], width=3), c.create_oval(w / 2 - 50, w / 2 - 40, w / 2 - 20, w / 2 - 10, fill=x[1]), c.create_oval(w / 2 + 50, w / 2 - 40, w / 2 + 20, w / 2 - 10, fill=x[1]), c.create_line(*it.chain(*k(o=[w / 2, w / 2 + 50], w_=w / 2.3, h=w / 7)), fill=x[1], width=3)])), i=lambda tk, w, t: tk.Canvas(t, width=w, height=w), j=lambda *_, **__: None, k=lambda o, w_, h, l=(lambda a,b,c_: a + (b - a) * c_): [[l(o[0] - w_ / 2, o[0] + w_ / 2, p), l(o[1] + h / 2, o[1] - h / 2, (2 * (p - 0.5)) ** 2)] for p in map(lambda i_: i_ / 100, range(100))], w=300, x=['yellow', 'black'])
